<?php

namespace App\Services;

use App\Contracts\{{ class }}Contract;
use Illuminate\Database\QueryException as DatabaseQueryException;
use InvalidArgumentException;
use App\Facades\ApiResponse;
use Doctrine\DBAL\Query\QueryException;
use Illuminate\Database\Eloquent\ModelNotFoundException;
use Symfony\Component\HttpFoundation\Response;
use App\Models\{{ class }};


class {{ class }}Service extends BaseService implements {{ class }}Contract
{


    /**
     * {{ class }}Service constructor.
     * @param {{ class }} $model
     */
    public function __construct({{ class }} $model)
    {
        parent::__construct($model);
        $this->model = $model;
    }
    /**
     * @param string $order
     * @param string $sort
     * @param array $columns
     * @return mixed
     */
    public function list{{ modelList }}(string $order = 'id', string $sort = 'desc', array $columns = ['*'])
    {
        return ApiResponse::make(__('message.{{ message }}.list'), $this->all($columns, $order, $sort), Response::HTTP_OK);
    }

    /**
     * @param int $id
     * @return mixed
     */
    public function find{{ class }}ById(int $id)
    {
        try {
            return ApiResponse::make(__('message.{{ message }}.show'), $this->findOneOrFail($id), Response::HTTP_OK);
        } catch (ModelNotFoundException $e) {
            return ApiResponse::make(__('message.{{ message }}.not_found'), null, Response::HTTP_NOT_FOUND);
        }
    }

    /**
     * @param array $params
     * @return mixed
     */
    public function create{{ class }}(array $params)
    {
        try {
            ${{ modelVariable }} = $this->create($params);
            return ApiResponse::make(__('message.{{ message }}.add'), ${{ modelVariable }}, Response::HTTP_OK);
        } catch (QueryException $exception) {
            return ApiResponse::make(__('message.internal_error'), null, Response::HTTP_BAD_REQUEST);
        }
    }

    /**
     * @param array $params
     * @return mixed
     */
    public function update{{ class }}(array $data, int $id)
    {
        try {
            $this->update($data, $id);
            return ApiResponse::make(__('message.{{ message }}.update'), null, Response::HTTP_OK);
        } catch (QueryException $exception) {
            return ApiResponse::make(__('message.internal_error'), null, Response::HTTP_BAD_REQUEST);
        }
    }

    /**
     * @param $id
     * @return bool
     */
    public function delete{{ class }}($id)
    {
        ${{ modelVariable }} = $this->delete($id);
        if (${{ modelVariable }}) {
            return ApiResponse::make(__('message.{{ message }}.deleted'), null, Response::HTTP_OK);
        } else {
            return ApiResponse::make(__('message.{{ message }}.not_found'), null, Response::HTTP_NOT_FOUND);
        }
    }

    /**
     * @param $id
     * @return bool
     */
    public function restore{{ class }}($id)
    {
        ${{ modelVariable }} = $this->restoreById($id);
        if (${{ modelVariable }}) {
            return ApiResponse::make(__('message.{{ message }}.restore'), null, Response::HTTP_OK);
        } else {
            return ApiResponse::make(__('message.{{ message }}.not_found'), null, Response::HTTP_NOT_FOUND);
        }
    }
}
