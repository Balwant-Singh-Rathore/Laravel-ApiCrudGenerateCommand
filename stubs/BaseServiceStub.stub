<?php

namespace App\Services;

use App\Contracts\BaseContract;
use Illuminate\Database\Eloquent\Model;
use Illuminate\Database\Eloquent\ModelNotFoundException;
use Illuminate\Support\Facades\Cache;
use Illuminate\Support\Str;

/**
 * Class BaseService
 *
 * @package \App\Services
 */
class BaseService implements BaseContract
{
    /**
     * @var Model
     */
    protected $model;
    protected $cacheTime;
    protected $cacheName;
    /**
     * BaseService constructor.
     * @param Model $model
     */
    public function __construct(Model $model)
    {
        $this->model = $model;
        $this->cacheTime = now()->addHour();
        $this->cacheName = Str::plural($this->model) . 'PR001';
    }

    /**
     * @param array $attributes
     * @return mixed
     */
    public function create(array $attributes)
    {
        Cache::forget(Str::plural($this->model));
        return $this->model->create($attributes);
    }

    /**
     * @param array $attributes
     * @param int $id
     * @return bool
     */
    public function update(array $attributes, int $id): bool
    {
        Cache::forget(Str::plural($this->model));
        return $this->find($id)->update($attributes);
    }

    /**
     * @param array $columns
     * @param string $orderBy
     * @param string $sortBy
     * @return mixed
     */
    public function all($columns = array('*'), string $orderBy = 'id', string $sortBy = 'asc')
    {
        $data =  Cache::remember($this->cacheName, $this->cacheTime, function () use ($columns, $orderBy, $sortBy) {
            return $this->model->orderBy($orderBy, $sortBy)->get($columns);
        });
        return $data;
    }

    /**
     * @param int $id
     * @return mixed
     */
    public function find(int $id)
    {
        $data =  Cache::remember($this->cacheName . 'single', $this->cacheTime, function () use ($id) {
            return $this->model->find($id);
        });
        return $data;
    }

    /**
     * @param int $id
     * @return mixed
     * @throws ModelNotFoundException
     */
    public function findOneOrFail(int $id)
    {
        $data =  Cache::remember($this->cacheName . 'findOrFail', $this->cacheTime, function () use ($id) {
            return $this->model->findOrFail($id);
        });
        return $data;
    }

    /**
     * @param array $data
     * @return mixed
     */
    public function findBy(array $data)
    {
        return $this->model->where($data)->all();
    }

    /**
     * @param array $data
     * @return mixed
     */
    public function findOneBy(array $data)
    {
        return $this->model->where($data)->first();
    }

    /**
     * @param array $data
     * @return mixed
     * @throws ModelNotFoundException
     */
    public function findOneByOrFail(array $data)
    {
        return $this->model->where($data)->firstOrFail();
    }

    /**
     * @param int $id
     * @return bool
     */
    public function delete(int $id): bool
    {
        Cache::forget(Str::plural($this->model));
        return $this->model->find($id)->delete();
    }


    /**
     * @param int $id
     * @return bool
     */
    public function restoreById(int $id): bool
    {
        Cache::forget(Str::plural($this->model));
        return $this->model->onlyTrashed()->where('id', $id)->restore();
    }
}
